// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: pkg/clientpb/client.proto

package clientpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoRaft_Register_FullMethodName = "/clientpb.GoRaft/register"
	GoRaft_Get_FullMethodName      = "/clientpb.GoRaft/get"
	GoRaft_Put_FullMethodName      = "/clientpb.GoRaft/put"
	GoRaft_Delete_FullMethodName   = "/clientpb.GoRaft/delete"
	GoRaft_Config_FullMethodName   = "/clientpb.GoRaft/config"
)

// GoRaftClient is the client API for GoRaft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoRaftClient interface {
	Register(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *ReadonlyQuery, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Config(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type goRaftClient struct {
	cc grpc.ClientConnInterface
}

func NewGoRaftClient(cc grpc.ClientConnInterface) GoRaftClient {
	return &goRaftClient{cc}
}

func (c *goRaftClient) Register(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoRaft_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRaftClient) Get(ctx context.Context, in *ReadonlyQuery, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoRaft_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRaftClient) Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoRaft_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRaftClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoRaft_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRaftClient) Config(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoRaft_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoRaftServer is the server API for GoRaft service.
// All implementations must embed UnimplementedGoRaftServer
// for forward compatibility.
type GoRaftServer interface {
	Register(context.Context, *Auth) (*Response, error)
	Get(context.Context, *ReadonlyQuery) (*Response, error)
	Put(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Config(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGoRaftServer()
}

// UnimplementedGoRaftServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoRaftServer struct{}

func (UnimplementedGoRaftServer) Register(context.Context, *Auth) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGoRaftServer) Get(context.Context, *ReadonlyQuery) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGoRaftServer) Put(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedGoRaftServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGoRaftServer) Config(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedGoRaftServer) mustEmbedUnimplementedGoRaftServer() {}
func (UnimplementedGoRaftServer) testEmbeddedByValue()                {}

// UnsafeGoRaftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoRaftServer will
// result in compilation errors.
type UnsafeGoRaftServer interface {
	mustEmbedUnimplementedGoRaftServer()
}

func RegisterGoRaftServer(s grpc.ServiceRegistrar, srv GoRaftServer) {
	// If the following call pancis, it indicates UnimplementedGoRaftServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoRaft_ServiceDesc, srv)
}

func _GoRaft_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRaftServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRaft_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRaftServer).Register(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRaft_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadonlyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRaftServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRaft_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRaftServer).Get(ctx, req.(*ReadonlyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRaft_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRaftServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRaft_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRaftServer).Put(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRaft_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRaftServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRaft_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRaftServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRaft_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRaftServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRaft_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRaftServer).Config(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GoRaft_ServiceDesc is the grpc.ServiceDesc for GoRaft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoRaft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientpb.GoRaft",
	HandlerType: (*GoRaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _GoRaft_Register_Handler,
		},
		{
			MethodName: "get",
			Handler:    _GoRaft_Get_Handler,
		},
		{
			MethodName: "put",
			Handler:    _GoRaft_Put_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GoRaft_Delete_Handler,
		},
		{
			MethodName: "config",
			Handler:    _GoRaft_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/clientpb/client.proto",
}
